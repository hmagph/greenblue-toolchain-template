---
stages:
- name: BUILD
  inputs:
  - type: git
    branch: master
    service: ${CATALOG_API_REPO}
  triggers:
  - type: commit
  jobs:
  - name: Build
    type: builder
  - name: Unit Tests
    type: tester
    script: |-
      #!/bin/bash
      npm install -g npm@3.7.2 ### work around default npm 2.1.1 instability
      npm install
      grunt dev-test-cov --no-color -f    
- name: DEV
  inputs:
  - type: job
    stage: BUILD
    job: Build
  triggers:
  - type: stage
  properties:
  - name: CF_APP_NAME
    value: undefined
    type: text
  - name: APP_URL
    value: undefined
    type: text
  jobs:
  - name: Deploy to Dev
    type: deployer
    target:
      region_id: ${DEV_REGION_ID}
      organization: ${DEV_ORG_NAME}
      space: ${DEV_SPACE_NAME}
      application: ${CF_APP_NAME}
    script: |
      #!/bin/bash
      cf create-service cloudantNoSQLDB Shared myMicroservicesCloudant
      # Push app
      export CF_APP_NAME="dev-$CF_APP"
      cf push "${CF_APP_NAME}"
      export APP_URL=http://$(cf app $CF_APP_NAME | grep urls: | awk '{print $2}')
      # View logs
      #cf logs "${CF_APP_NAME}" --recent
  - name: Functional Tests
    type: tester
    script: |-
      #!/bin/bash
      export CATALOG_API_TEST_SERVER=$APP_URL
      npm install -g npm@3.7.2 ### work around default npm 2.1.1 instability
      npm install
      grunt dev-fvt --no-color -f
- name: TEST
  inputs:
  - type: job
    stage: BUILD
    job: Build
  triggers:
  - type: stage
  properties:
  - name: CF_APP_NAME
    value: undefined
    type: text
  - name: APP_URL
    value: undefined
    type: text
  jobs:
  - name: Deploy to Test
    type: deployer
    target:
      region_id: ${QA_REGION_ID}
      organization: ${QA_ORG_NAME}
      space: ${QA_SPACE_NAME}
      application: ${CF_APP_NAME}
    script: |
      #!/bin/bash
      cf create-service cloudantNoSQLDB Shared myMicroservicesCloudant
      # Push app
      export CF_APP_NAME="test-$CF_APP"
      cf push "${CF_APP_NAME}"
      # View logs
      #cf logs "${CF_APP_NAME}" --recent
  - name: Sauce Labs Tests
    type: tester
    extension_id: ibm.devops.services.pipeline.saucelabs
    services:
      - ${SAUCE_LABS}
    target:
      region_id: ${QA_REGION_ID}
      organization: ${QA_ORG_NAME}
      space: ${QA_SPACE_NAME}
    DL_ASSETS: 'false'
    SELECT_CMD: custom
    COMMAND: |-
      #!/bin/bash
      npm install
      echo $APP_URL | grep "stage1"
      if [ $? -eq 0 ]; then
        grunt test_fake
      else
        grunt test_real
      fi
    enable_tests: true
    test_file_pattern: '*.xml'
- name: PROD
  inputs:
  - type: job
    stage: BUILD
    job: Build
  triggers:
  - type: stage
  properties:
  - name: CF_APP_NAME
    value: undefined
    type: text
  jobs:
  - name: Green/Blue Deploy
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME}
    script: |-
      #!/bin/bash
      #############
      # Colors	#
      #############
      green='\e[0;32m'
      blue='\e[0;34m'
      label_color='\e[0;33m'
      no_color='\e[0m' # No Color
      #############
      # Variables	#
      #############
      # Used to create a public route within the space for accessing the deployed 
      # application. The reserved CF_SPACE variable (configured in the deployer) is 
      # used to unique the route name per space.
      if [ "${CF_SPACE}" == "prod" ]; then
      	PUBLIC_HOST=${CF_APP}
      else
      	PUBLIC_HOST="${CF_SPACE}-${CF_APP}"
      fi
      # Compute a unique app name using the reserved CF_APP name (configured in the 
      # deployer or from the manifest.yml file), the build number, and a 
      # timestamp (allowing multiple deploys for the same build).
      export CF_APP_NAME="${CF_APP}_${BUILD_NUMBER}_$(date +%s)"
      # Used to define a temporary route to test the newly deployed app
      TEST_HOST=$CF_APP_NAME
      # Java artifact being deployed. Needs to match output from 
      # the build process.
      WAR=Pipeline_hello1.war
      MEMORY=256M
      echo `cat /etc/*-release`
      echo `cf --version`
      CF_TRACE=true
      echo -e "${label_color}Variables:${no_color}"
      echo "PUBLIC_HOST=$PUBLIC_HOST"
      echo "CF_APP_NAME=$CF_APP_NAME"
      echo "TEST_HOST=$TEST_HOST"
      #############
      # Find existing deployed apps (usually one) to the space based on the binding to the PUBLIC_HOST
      #############
      rm -f apps.txt
      echo -e "${label_color}Find all existing deployments:${no_color}"
      cf apps | { grep $PUBLIC_HOST || true; } | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" &> apps.txt
      cat apps.txt
      # Store just the deployed application names
      awk '{ print $1 }' apps.txt > app_names.txt
      rm -f apps.txt
      #############
      # Push the updates from the build to create a newly deployed application.
      #############
      echo -e "${label_color}Pushing new deployment - ${blue}$CF_APP_NAME${no_color}"
      cf push $CF_APP_NAME -n $TEST_HOST
      DEPLOY_RESULT=$?
      if [ $DEPLOY_RESULT -ne 0 ]; then
      	echo -e "${blue}Deployment of $CF_APP_NAME failed!!"
      	cf logs $CF_APP_NAME --recent
      	return $DEPLOY_RESULT
      fi
      echo -e "${label_color}APPS:${no_color}"
      cf apps | grep ${CF_APP}
      #############
      # Inject testing to ensure that the new app version is good.
      #############
      echo -e "${label_color}Testing new app - ${blue}$CF_APP_NAME${no_color}"
      APP_URL=http://$(cf app $CF_APP_NAME | grep urls: | awk '{print $2}')
      curl "$APP_URL"
      TEST_RESULT=$?
      if [ $TEST_RESULT -ne 0 ]; then
      	echo -e "${label_color}New app did not deploy properly - ${blue}$CF_APP_NAME${no_color}"
      	return $TEST_RESULT
      else
      	echo -e "${label_color}Test PASSED!!!!${no_color}"	
      fi
      #############
      # Map traffic to the new version by binding to the public host.
      # NOTE: The old version(s) is still taking traffic to avoid disruption in service.
      #############
      echo -e "${label_color}Map public space route to new app - ${green}$CF_APP_NAME${no_color}"
      cf map-route $CF_APP_NAME -n $PUBLIC_HOST
      echo -e "${green}Public route bindings:${no_color}"
      cf routes | { grep $PUBLIC_HOST || true; }
      #############
      # Delete the temporary route that was used for testing since it is no longer needed.
      #############
      echo -e "${label_color}Remove and delete test route - ${blue}$TEST_HOST${no_color}"
      cf unmap-route $CF_APP_NAME -n $TEST_HOST
      if [ $? -ne 0 ]; then
      	echo -e "${label_color}Test route isn't mapped and doesn't need to be removed.${no_color}"
      fi
      cf delete-route -n $TEST_HOST -f
      #############
      # Delete the old application(s) at this point. They are no longer needed.
      #############
      while read name
      do
      	if [ "$name" != "$CF_APP_NAME" ]; then
      		echo -e "${label_color}Deleting old deployed application - $name${no_color}"
      		cf delete $name -f
      	fi
      done < app_names.txt
      rm -f app_names.txt
      #############
      # Summary 	#
      #############
      echo -e "${label_color}Deployed Applications:${no_color}"
      cf apps | grep ${CF_APP}
      echo -e "${label_color}Public route bindings:${no_color}"
      cf routes | grep $PUBLIC_HOST
      echo -e "${label_color}You have successfully executed a rolling deployment of ${green}$CF_APP_NAME${no_color}."
